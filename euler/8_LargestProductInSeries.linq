<Query Kind="Program">
  <Namespace>Xunit</Namespace>
</Query>

#load "xunit"

void Main()
{
	RunTests();  // Call RunTests() or press Alt+Shift+T to initiate testing.
}

/*
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
*/

private long GetMaxProductInSeries(int digits)
{
	string series = LoadNumber(); 
	long product = int.Parse(series[0].ToString()); 
	int i = 0; int j = 0; 
	long maxProduct = 0;

	int val = 0;
	while (j < series.Length)
	{
		while (j - i < digits)
		{
			j++;
			val = int.Parse(series[j].ToString());
			if (val == 0) 
			{
				i = j + 1; 
				product = 1;
			}
			else 
			{
				product *= val;
			}
		}
		val = int.Parse(series[i].ToString()); 
		Assert.NotEqual(val, 0); 
		product /= val; 
		i++;
		j++;
		do {} while ()
		val = int.Parse(series[j].ToString());
		if (val == 0) 
		{
			i = j + 1;	
			product = 
		}
		
	}


	return maxProduct; 
}

private string LoadNumber() 
{
	StringBuilder number = new StringBuilder("73167176531330624919225119674426574742355349194934"); 
	number.Append("96983520312774506326239578318016984801869478851843");
	number.Append("85861560789112949495459501737958331952853208805511");
	number.Append("12540698747158523863050715693290963295227443043557");
	number.Append("66896648950445244523161731856403098711121722383113");
	number.Append("62229893423380308135336276614282806444486645238749");
	number.Append("30358907296290491560440772390713810515859307960866");
	number.Append("70172427121883998797908792274921901699720888093776");
	number.Append("65727333001053367881220235421809751254540594752243");
	number.Append("52584907711670556013604839586446706324415722155397");
	number.Append("53697817977846174064955149290862569321978468622482");
	number.Append("83972241375657056057490261407972968652414535100474");
	number.Append("82166370484403199890008895243450658541227588666881");
	number.Append("16427171479924442928230863465674813919123162824586");
	number.Append("17866458359124566529476545682848912883142607690042");
	number.Append("24219022671055626321111109370544217506941658960408");
	number.Append("07198403850962455444362981230987879927244284909188");
	number.Append("84580156166097919133875499200524063689912560717606");
	number.Append("05886116467109405077541002256983155200055935729725");
	number.Append("71636269561882670428252483600823257530420752963450");

	return number.ToString(); 
}

[Theory]
[InlineData(4, 5832)]
void Test(int digits, long expected) 
{
	long result = 
}

